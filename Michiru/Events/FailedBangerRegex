// public static readonly List<string> WhitelistedUrls = [
//     @"^.*(https:\/\/a?((?:www\.|music\.))youtu(?:be\.com|\.be)\/watch\?v\=.*(?:.*(?=\&))).*", // YouTube, YouTube Music (with subdomains)
//     @"^.*(https:\/\/a?((?:www\.|music\.))youtu(?:be\.com|\.be)\/playlist\?list\=.*(?:.*(?=\&))).*", // YouTube, YouTube Music (with subdomains)
//     @"^.*(https:\/\/youtu(?:be\.com|\.be)\/watch\?v\=.*(?:.*(?=\&))).*", // YouTube, YouTube Music (without subdomains)
//     @"^.*(https:\/\/youtu(?:be\.com|\.be)\/playlist\?list\=.*(?:.*(?=\&))).*", // YouTube, YouTube Music (without subdomains)
//     @"^.*(https:\/\/open\.spotify\.com\/album\/(?:.*(?=\?))).*", // Spotify Album
//     @"^.*(https:\/\/open\.spotify\.com\/track\/.*(?:.*(?=\?))).*", // Spotify Track
//     @"^.*(https:\/\/youtube\.com\/shorts\/(?:.*(?=\?))).*", // YouTube Shorts
//     @"^.*(https:\/\/deezer\.page\.link/.\S+).*", // Deezer
//     @"^.*(https:\/\/.*\.bandcamp\.com\/track\/.\S+).*", // Bandcamp
//     @"^.*(https:\/\/tidal\.com\/browse\/track\/.\S+).*", // Tidal
//     @"^.*(https:\/\/soundcloud\.com\/.*\/.*\/.\S+).*", // SoundCloud
//     @"^.*(https:\/\/music\.apple\.com\/.*\/album\/.*\/.*(?:.*(?=\?))).*" // Apple Music
// ];

// private static readonly List<string> LazyWhitelistedUrls = [
//     "music.youtube.com/watch?v=",
//     "youtube.com/watch?v=",
//     "www.youtube.com/watch?v=",
//     "youtu.be/watch?v=",
//     "open.spotify.com/album/",
//     "open.spotify.com/track/",
//     "youtube.com/shorts/",
//     "www.youtube.com/shorts/",
//     "deezer.page.link/",
//     "bandcamp.com/track/",
//     "tidal.com/browse/track/",
//     "soundcloud.com/",
//     "music.apple.com/album/"
// ];

// public static bool JustDoItTheLazyWay(string contents) {
//     var good = false;
//     foreach (var url in LazyWhitelistedUrls) {
//         good = contents.Contains(url, StringComparison.OrdinalIgnoreCase);
//     }
//
//     return good;
// }

// public static string FindMatchedUrl(string input) {
//     foreach (var match in WhitelistedUrls.Select(pattern => new Regex(pattern)).Select(regex => regex.Match(input)).Where(match => match.Success)) {
//         return match.Groups[1].Value;
//     }
//
//     return "No match found";
// }

// public static bool IsUrlWhitelisted_Lazy(string contents) {
//     if (string.IsNullOrWhiteSpace(contents))
//         return false;
//     var mathes = WhitelistedUrls.Select(pattern => new Regex(pattern, RegexOptions.IgnoreCase)).Any(regex => regex.IsMatch(contents));
//     var doubleConfirm = LazyWhitelistedUrls.Any(x => x.Contains(contents));
//     return mathes && doubleConfirm;
// }

// public static bool IsUrlWhitelisted(string contents)
//     => !string.IsNullOrWhiteSpace(contents) &&
//        WhitelistedUrls.Select(pattern =>
//            Regex.Match(contents, pattern, RegexOptions.IgnoreCase)).Any(match =>
//            match is { Success: true, Groups.Count: > 1 } &&
//            !string.IsNullOrWhiteSpace(match.Groups[1].Value));

// public static bool IsUrlWhitelisted_FirstStep(string contents) {
//     if (string.IsNullOrWhiteSpace(contents)) return false;
//     var regexGroup1 = FindMatchedUrl(contents)!;
//     BangerLogger.Information($"Group 1: {regexGroup1}");
//     // contents matches the regex
//     var matchesRegex = WhitelistedUrls.Select(pattern => 
//         Regex.Match(contents, pattern, RegexOptions.IgnoreCase)).Any(match => 
//         match is { Success: true, Groups.Count: >= 1 } 
//         && !string.IsNullOrWhiteSpace(match.Groups[1].Value));
//     var doubleConfirm = contents.Contains(regexGroup1);
//     return matchesRegex && doubleConfirm;
// }

// public static bool IsUrlWhitelisted(string contents) {
//     if (string.IsNullOrWhiteSpace(contents)) return false;
//     var regexGroup1 = FindMatchedUrl(contents)!;
//     BangerLogger.Information($"Group 1: {regexGroup1}");
//     var matchesRegex = WhitelistedUrls.Select(pattern => 
//         Regex.Match(contents, pattern, RegexOptions.IgnoreCase)).Any(match => 
//         match is { Success: true, Groups.Count: >= 1 }
//         && !string.IsNullOrWhiteSpace(match.Groups[1].Value));
//     var doubleConfirm = contents.Contains(regexGroup1);
//     var both = matchesRegex && doubleConfirm;
//     return !both ? IsUrlWhitelisted_Lazy(contents) : both;
// }

// private static bool IsRegexUrlSpotify(string contents) {
//     var isValid = IsUrlWhitelisted(contents);
//     var isSpotify = contents.Contains("spotify.com");
//     return isValid && isSpotify;
// }

// public static string? GetFirstGroupFromUrl(string input)
//     => string.IsNullOrWhiteSpace(input) ? null : (from pattern in WhitelistedUrls select Regex.Match(input, pattern, RegexOptions.IgnoreCase) into match where match.Success select match.Groups[1].Value).FirstOrDefault();

// [SlashCommand("testregex", "Tests a URL against the whitelist"), RequireOwner]
// public async Task TestRegex([Summary("url", "URL to test")] string url, bool ephemeral = false) {
//     var sb = new StringBuilder();
//     
//     sb.AppendLine($"URL: <{url}>");
//     sb.AppendLine($"Is URL Whitelisted: {BangerListener.IsUrlWhitelisted(url, Config.GetGuildBanger(Context.Guild.Id).WhitelistedUrls!)}");
//     await RespondAsync(sb.ToString(), ephemeral: ephemeral);
// }